----------REFINERY IMPORTANT TIP ---------------------------------------------------------------

PARA DEFINIR MI PAGINA DE INICIO, ENTRAR COMO ADMIN EN .../refinery/users/login
Y EN PAGES EDITAR LA PAGINA QUE QUIERAS COMO INICIO Y PONER UNA BARRA / EN LA OPCION
Forward this page to another website or page
Tambien seleccionar todas las "View template" como "Home" y no como "Show", sino el switcher de idiomas no aparece.
https://groups.google.com/forum/#!topic/refinery-cms/UEty7C8VddU

PARA SUBIR IMAGENES A HEROKU, ENTRAR COMO ADMIN Y EN LA PESTANYA IMAGENES
SUBIR LA IMAGEN Y DESPUES EN LA PESTANYA PAGES UTILIZARLA

1. Login into refinery cms user
http://raulferrandez.herokuapp.com/refinery/users/login

username: ferrande
mail: ferrandezraul@gmail.com
password: ferrande

----------INSTALL POSTGRESQL UBUNTU  -----------------------------------------------------------------

sudo apt-get install postgresql postgresql-client postgresql-contrib libpq-dev

----------CLEAN/ EXPORT / IMPORT DATABASE ------------------------------------------------------------

NOTE that I use postgresql database that's why I can not see the database in folder rails_app/db from my app
 To see where the database is stored locally on my pc, check your postgres.conf located at etc/postgresql/9.3/main/postgresql.conf.
 In postgres.conf can see a line stating data_directory=<path>

 Or better, export the database with:
 pg_dump dbname > outfile
 i.e. pg_dump development_postgreSQL > outfile

 For export/import see heroku doc
 https://devcenter.heroku.com/articles/heroku-postgres-import-export
 https://devcenter.heroku.com/articles/pgbackups

---------- EXPORT DATABASE FROM PRODUCTION HEROKU:  ------------------------------------------------------------

 heroku pgbackups:capture --app [app_name]
 curl -o latest.dump `heroku pgbackups:url --app [app_name]`

 In my case:
 heroku pgbackups:capture --app raulferrandez
 curl -o latest.dump `heroku pgbackups:url --app raulferrandez`

 IMPORT EXPORTED DATABASE latest.dump AS MY LOCAL DEV DATABASE:
 pg_restore -c -d [local_database_name] [exported_database]

 In my case:
 pg_restore -c -d development_postgreSQL latest.dump

---------- EXPORT DATABASE FROM LOCALHOST -----------------------------------------------------------------------

 pg_dump -Fc --no-acl --no-owner -U user database_name > my_db.dump
i.e.  pg_dump -Fc --no-acl --no-owner -U raul development_postgreSQL > my_db_blog.dump

 ---------- POSTGRESQL USEFULL COMMANDS: -----------------------------------------------------------------------

 psql -l                                    List databases
 psql -d development_postgreSQL             Enter database development_postgreSQL

 Para crear un usuario llamado raul que puedas usar en tu database.yml, teclea:

 sudo su postgres -c psql
 CREATE USER raul;
 ALTER ROLE raul WITH CREATEDB;
 \q

 CLEAN DATABASE:
 rake db:drop
 rake db:create
 rake db:migrate

----------LOGIN HEROKU AND USEFULL COMMANDS ------------------------------------------------------------

$ heroku login
Enter your Heroku credentials.
Email: ferrandezraul@gmail.com
Password: bxxx..

heroku info (list current app info)
heroku apps (list all my app)
heroku ps
heroku logs

NEEDED IF I RENAME MY APP IN HEROKU web browser
To bind a local app to heroku:
You need to remove the heroku remote in git using this command:
git remote rm heroku
Then you can add a new remote using this one:
git remote add heroku git@heroku.com:your-app.git

i.e. git remote add heroku git@heroku.com:ferrandezraul.git

----------- SETTING AWS S3 CREDENTIALS ON HEROKU -------------------------------------

heroku config:set AWS_ACCESS_KEY_ID=[XX] AWS_SECRET_ACCESS_KEY=[XX]
heroku config:set S3_BUCKET=my-blog-assets S3_KEY=[XX] S3_SECRET=[XX] S3_REGION=Ireland


----------  ACTUALIZAR APLICACION EN HEROKU  ------------------------------------------
git add .
git commit -m "whatever"
git push heroku master

----------  ENVIRONMENT VARS  -------------------------------------------------------------

Las environment variables locales se setean en un archivo llamado .env
o en config/environment.rb
Para verlas:
cat .env
cat config/environment.rb

The configuration for an application is stored in config vars.
For example, hereâ€™s how to configure an encryption key for an application:

$ heroku config:add ENCRYPTION_KEY= my_secret_launch_codes
Adding config vars and restarting demoapp... done, v14
ENCRYPTION_KEY:     my_secret_launch_codes

Terminology: Config vars contain customizable configuration data that can be changed independently
of your source code. The configuration is exposed to a running application via environment variables.

At runtime, all of the config vars are exposed as environment variables -
so they can be easily extracted programatically. A Ruby application deployed with the above config var,
can access it by calling ENV["ENCRYPTION_KEY"].

